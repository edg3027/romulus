generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CrudOperation {
  CREATE
  UPDATE
  DELETE

  @@map("GenreOperation")
}

model Artist {
  id   Int      @id @default(autoincrement())
  name String
  akas String[]

  spotifyIds String[]

  issues IssueArtist[]
  tracks TrackArtist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtistHistory {
  id   Int      @id @default(autoincrement())
  name String
  akas String[]

  spotifyIds String[]

  artistId  Int
  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model Release {
  id     Int     @id @default(autoincrement())
  issues Issue[]

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReleaseHistory {
  id Int @id @default(autoincrement())

  releaseId Int
  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model Issue {
  id          Int           @id @default(autoincrement())
  title       String
  releaseDate String?
  artists     IssueArtist[]
  objects     IssueObject[]

  spotifyId String?

  release   Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId Int

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueHistory {
  id          Int                  @id @default(autoincrement())
  title       String
  releaseDate String?
  artists     IssueHistoryArtist[]
  objects     IssueHistoryObject[]

  spotifyId String?

  releaseId Int

  issueId   Int
  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model IssueArtist {
  issue   Issue @relation(fields: [issueId], references: [id])
  issueId Int

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  order Int

  @@id([issueId, artistId])
}

model IssueHistoryArtist {
  issueHistory   IssueHistory @relation(fields: [issueHistoryId], references: [id])
  issueHistoryId Int

  artistId Int

  order Int

  @@id([issueHistoryId, artistId])
}

model IssueObject {
  issue   Issue @relation(fields: [issueId], references: [id])
  issueId Int

  object   Object @relation(fields: [objectId], references: [id])
  objectId Int

  order Int

  @@id([issueId, objectId])
}

model IssueHistoryObject {
  issueHistory   IssueHistory @relation(fields: [issueHistoryId], references: [id])
  issueHistoryId Int

  objectId Int

  order Int

  @@id([issueHistoryId, objectId])
}

model Object {
  id     Int           @id @default(autoincrement())
  name   String
  tracks ObjectTrack[]

  issues IssueObject[]
}

model ObjectHistory {
  id     Int                  @id @default(autoincrement())
  name   String
  tracks ObjectHistoryTrack[]

  objectId  Int
  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model ObjectTrack {
  object   Object @relation(fields: [objectId], references: [id])
  objectId Int

  track   Track @relation(fields: [trackId], references: [id])
  trackId Int

  order Int

  @@id([objectId, trackId])
}

model ObjectHistoryTrack {
  objectHistory   ObjectHistory @relation(fields: [objectHistoryId], references: [id])
  objectHistoryId Int

  trackId Int

  order Int

  @@id([objectHistoryId, trackId])
}

model Track {
  id         Int           @id @default(autoincrement())
  title      String
  durationMs Int
  artists    TrackArtist[]

  objects ObjectTrack[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackHistory {
  id         Int                  @id @default(autoincrement())
  title      String
  durationMs Int
  artists    TrackHistoryArtist[]

  trackId   Int
  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model TrackArtist {
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  order Int

  @@id([trackId, artistId])
}

model TrackHistoryArtist {
  trackHistory   TrackHistory @relation(fields: [trackHistoryId], references: [id])
  trackHistoryId Int

  artistId Int

  order Int

  @@id([trackHistoryId, artistId])
}

enum Permission {
  EDIT_GENRES
  EDIT_ARTISTS
  EDIT_RELEASES
  MIGRATE_CONTRIBUTORS
}

model Account {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  darkMode             Boolean @default(true)
  genreRelevanceFilter Int     @default(1)
  showTypeTags         Boolean @default(true)
  showRelevanceTags    Boolean @default(false)

  permissions Permission[]

  genreHistory   GenreHistory[]
  artistHistory  ArtistHistory[]
  releaseHistory ReleaseHistory[]
  issueHistory   IssueHistory[]
  trackHistory   TrackHistory[]

  reviews Review[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  ObjectHistory ObjectHistory[]
}

model Review {
  id     Int  @id @default(autoincrement())
  rating Int?
  review Int?

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  release   Release? @relation(fields: [releaseId], references: [id])
  releaseId Int?

  issue   Issue? @relation(fields: [issueId], references: [id])
  issueId Int?

  track   Track? @relation(fields: [trackId], references: [id])
  trackId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GenreType {
  MOVEMENT
  META
  STYLE
  TREND
  SCENE
}

model Genre {
  id               Int        @id @default(autoincrement())
  name             String
  subtitle         String?
  type             GenreType  @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  startDate        String?
  endDate          String?
  oldAkas          String[]   @map("akas")
  akas             GenreAka[]
  relevance        Int        @default(99)

  parentGenres Genre[] @relation("hierarchy")
  childGenres  Genre[] @relation("hierarchy")

  influencedByGenres Genre[] @relation("influence")
  influencesGenres   Genre[] @relation("influence")

  x Int?
  y Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreAka {
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  name      String
  relevance Int
  order     Int

  @@id([genreId, name])
}

model GenreHistory {
  id               Int               @id @default(autoincrement())
  name             String
  subtitle         String?
  type             GenreType         @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  startDate        String?
  endDate          String?
  oldAkas          String[]          @map("akas")
  akas             GenreHistoryAka[]
  relevance        Int               @default(99)

  parentGenreIds       Int[]
  influencedByGenreIds Int[]

  x Int?
  y Int?

  treeGenreId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int?
  account   Account?      @relation(fields: [accountId], references: [id], onDelete: SetNull)
}

model GenreHistoryAka {
  genre   GenreHistory @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  name      String
  relevance Int
  order     Int

  @@id([genreId, name])
}
