generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CrudOperation {
  CREATE
  UPDATE
  DELETE

  @@map("GenreOperation")
}

model Artist {
  id   Int      @id @default(autoincrement())
  name String
  akas String[]

  spotifyIds String[]

  issues IssueArtist[]
  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtistHistory {
  id   Int      @id @default(autoincrement())
  name String
  akas String[]

  spotifyIds String[]

  artistId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model Release {
  id Int @id @default(autoincrement())

  issues  Issue[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReleaseHistory {
  id Int @id @default(autoincrement())

  releaseId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model Issue {
  id          Int           @id @default(autoincrement())
  title       String
  artists     IssueArtist[]
  releaseDate String?

  spotifyId String?

  release   Release @relation(fields: [releaseId], references: [id])
  releaseId Int

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueArtist {
  issue   Issue @relation(fields: [issueId], references: [id])
  issueId Int

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  order Int

  @@id([issueId, artistId])
}

model IssueHistory {
  id          Int     @id @default(autoincrement())
  title       String
  artistIds   Int[]
  releaseDate String?

  spotifyId String?

  issueId   Int
  releaseId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}

model Track {
  id         Int      @id @default(autoincrement())
  title      String
  durationMs Int
  artists    Artist[]

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Permission {
  EDIT_GENRES
  EDIT_ARTISTS
  EDIT_RELEASES
  MIGRATE_CONTRIBUTORS
}

model Account {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  darkMode Boolean @default(true)

  permissions Permission[]

  genreHistory   GenreHistory[]
  artistHistory  ArtistHistory[]
  releaseHistory ReleaseHistory[]
  issueHistory   IssueHistory[]

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Review {
  id     Int  @id @default(autoincrement())
  rating Int?
  review Int?

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  release   Release? @relation(fields: [releaseId], references: [id])
  releaseId Int?

  issue   Issue? @relation(fields: [issueId], references: [id])
  issueId Int?

  track   Track? @relation(fields: [trackId], references: [id])
  trackId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GenreType {
  MOVEMENT
  META
  STYLE
  TREND
  SCENE
}

model Genre {
  id               Int       @id @default(autoincrement())
  name             String
  type             GenreType @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  startDate        String?
  endDate          String?
  akas             String[]
  relevance        Int       @default(99)

  parentGenres Genre[] @relation("hierarchy")
  childGenres  Genre[] @relation("hierarchy")

  influencedByGenres Genre[] @relation("influence")
  influencesGenres   Genre[] @relation("influence")

  x Int?
  y Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreHistory {
  id               Int       @id @default(autoincrement())
  name             String
  type             GenreType @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  startDate        String?
  endDate          String?
  akas             String[]
  relevance        Int       @default(99)

  parentGenreIds       Int[]
  influencedByGenreIds Int[]

  x Int?
  y Int?

  treeGenreId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int
  account   Account       @relation(fields: [accountId], references: [id])
}
