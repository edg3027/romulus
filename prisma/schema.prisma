generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CrudOperation {
  CREATE
  UPDATE
  DELETE

  @@map("GenreOperation")
}

enum Permission {
  EDIT_GENRES
  EDIT_ARTISTS
  EDIT_RELEASES
  MIGRATE_CONTRIBUTORS
}

model Account {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  darkMode             Boolean @default(true)
  genreRelevanceFilter Int     @default(1)
  showTypeTags         Boolean @default(true)
  showRelevanceTags    Boolean @default(false)

  permissions Permission[]

  genreHistory GenreHistory[]

  relevanceVotes GenreRelevanceVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GenreType {
  MOVEMENT
  META
  STYLE
  TREND
  SCENE
}

model Genre {
  id               Int        @id @default(autoincrement())
  name             String
  subtitle         String?
  type             GenreType  @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  akas             GenreAka[]
  relevance        Int        @default(99)

  parentGenres Genre[] @relation("hierarchy")
  childGenres  Genre[] @relation("hierarchy")

  influencedByGenres Genre[] @relation("influence")
  influencesGenres   Genre[] @relation("influence")

  relevanceVotes GenreRelevanceVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreAka {
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  name      String
  relevance Int
  order     Int

  @@id([genreId, name])
}

model GenreHistory {
  id               Int               @id @default(autoincrement())
  name             String
  subtitle         String?
  type             GenreType         @default(STYLE)
  shortDescription String?
  longDescription  String?
  notes            String?
  akas             GenreHistoryAka[]

  parentGenreIds       Int[]
  influencedByGenreIds Int[]

  treeGenreId Int

  createdAt DateTime      @default(now())
  operation CrudOperation
  accountId Int?
  account   Account?      @relation(fields: [accountId], references: [id], onDelete: SetNull)
}

model GenreHistoryAka {
  genre   GenreHistory @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  name      String
  relevance Int
  order     Int

  @@id([genreId, name])
}

model GenreRelevanceVote {
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  relevance Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([genreId, accountId])
}

model Unit {
  id       Int         @id @default(autoincrement())
  issues   UnitIssue[]
  concepts Concept[]
}

model UnitIssue {
  id     Int  @id @default(autoincrement())
  unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int
}

model ConceptType {
  id       Int       @id @default(autoincrement())
  name     String
  concepts Concept[]
}

model Concept {
  id      Int             @id @default(autoincrement())
  type    ConceptType     @relation(fields: [typeId], references: [id])
  typeId  Int
  units   Unit[]
  issues  ConceptIssue[]
  bundles ConceptBundle[]
}

model ConceptIssue {
  id        Int     @id @default(autoincrement())
  concept   Concept @relation(fields: [conceptId], references: [id])
  conceptId Int
}

model ConceptBundle {
  id       Int                  @id @default(autoincrement())
  concepts Concept[]
  issues   ConceptBundleIssue[]
}

model ConceptBundleIssue {
  id              Int           @id @default(autoincrement())
  conceptBundle   ConceptBundle @relation(fields: [conceptBundleId], references: [id])
  conceptBundleId Int
}

model ItemType {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]
}

model Item {
  id      Int          @id @default(autoincrement())
  type    ItemType     @relation(fields: [typeId], references: [id])
  typeId  Int
  bundles ItemBundle[]
}

model ItemBundle {
  id    Int    @id @default(autoincrement())
  items Item[]
}

model Artist {
  id      Int      @id @default(autoincrement())
  name    String?
  members Member[]
}

model Member {
  id Int @id @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id])
  personId Int

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int

  name String?
}

model Person {
  id         Int      @id @default(autoincrement())
  memberOf   Member[]
  firstName  String?
  middleName String?
  lastName   String?
}
