File: src/lib/server/features/media/commands/application/add-media-type-parent.ts
Contents:
import type { IEventStore } from '../domain/event-store/event-store'
import { AddParentToMediaTypeEvent } from '../domain/media-type-tree/events/add-parent-to-media-type'
import type { IMediaTypeTreeRepository } from '../domain/media-type-tree/repository'
import type { CycleError, MediaTypeNotFoundError } from '../domain/media-type-tree/tree'

export class AddMediaTypeParent {
  constructor(
    private mediaTypeTreeRepo: IMediaTypeTreeRepository,
    private eventStore: IEventStore,
  ) {}

  async execute(id: number, parentId: number): Promise<void | MediaTypeNotFoundError | CycleError> {
    const tree = await this.mediaTypeTreeRepo.get()

    const event = new AddParentToMediaTypeEvent(id, parentId)
    const result = event.process(tree)
    if (result instanceof Error) {
      return result
    }

    await this.eventStore.save(event)
  }
}

---

File: src/lib/server/features/media/commands/application/create-media-type.ts
Contents:
import type { IEventStore } from '../domain/event-store/event-store'
import type { IIdGenerator } from '../domain/ids/id-generator'
import { AddMediaTypeToTreeEvent } from '../domain/media-type-tree/events/add-media-type-to-tree'
import type { IMediaTypeTreeRepository } from '../domain/media-type-tree/repository'
import { MediaTypeAlreadyExistsError } from '../domain/media-type-tree/tree'

export class CreateMediaTypeCommand {
  constructor(
    private mediaTypeTreeRepo: IMediaTypeTreeRepository,
    private idGenerator: IIdGenerator,
    private eventStore: IEventStore,
  ) {}

  async execute(): Promise<{ id: number }> {
    const tree = await this.mediaTypeTreeRepo.get()
    const id = await this.idGenerator.generate()

    const event = new AddMediaTypeToTreeEvent(id)
    const result = event.process(tree)

    if (result instanceof MediaTypeAlreadyExistsError) {
      // This should never happen given that we genrate our own ids.
      // If we wanted to, we could regenerate a new id and try the event again.
      throw result
    }

    await this.eventStore.save(event)

    return { id }
  }
}

---

File: src/lib/server/features/media/commands/application/get-media-type-tree.ts
Contents:
import type { IMediaTypeTreeRepository } from '../domain/media-type-tree/repository'

export class GetMediaTypeTreeQuery {
  constructor(private mediaTypeTreeRepo: IMediaTypeTreeRepository) {}

  async execute(): Promise<{ id: number; children: Set<number> }[]> {
    const tree = await this.mediaTypeTreeRepo.get()
    return tree.getAll().map((node) => ({
      id: node.id,
      children: node.getChildren(),
    }))
  }
}

---

File: src/lib/server/features/media/commands/domain/event-store/event-store.ts
Contents:
import type { IEvent } from './event'

export type IEventStore = {
  get(): IEvent[] | Promise<IEvent[]>
  save(event: IEvent): void | Promise<void>
}

---

File: src/lib/server/features/media/commands/domain/event-store/event.ts
Contents:
import type { MediaTypeTree } from '../media-type-tree/tree'

export type IEvent = {
  process(tree: MediaTypeTree): void | Error
}

---

File: src/lib/server/features/media/commands/domain/ids/id-generator.ts
Contents:
export type IIdGenerator = {
  generate(): number | Promise<number>
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/events/add-media-type-to-tree.test.ts
Contents:
import { expect } from 'vitest'

import { test } from '../../../../../../../../vitest-setup'
import { MemoryIdGenerator } from '../../../infrastructure/memory-id-generator'
import { MediaTypeAlreadyExistsError, MediaTypeTree } from '../tree'
import { AddMediaTypeToTreeEvent } from './add-media-type-to-tree'

test('should add a media type to the tree', () => {
  const tree = new MediaTypeTree()
  const id = new MemoryIdGenerator().generate()
  const event = new AddMediaTypeToTreeEvent(id)
  const result = event.process(tree)
  if (result instanceof Error) {
    expect.fail(`Failed to add media type to tree: ${result.message}`)
  }
  expect(tree.get(id)).toBeDefined()
})

test('should error if media type already exists with id', () => {
  const tree = new MediaTypeTree()
  const id = new MemoryIdGenerator().generate()
  const event = new AddMediaTypeToTreeEvent(id)

  const initialAddResult = event.process(tree)
  if (initialAddResult instanceof Error) {
    expect.fail(`Failed to add media type to tree: ${initialAddResult.message}`)
  }

  const secondAddResult = event.process(tree)
  expect(secondAddResult).toBeInstanceOf(MediaTypeAlreadyExistsError)
})

---

File: src/lib/server/features/media/commands/domain/media-type-tree/events/add-media-type-to-tree.ts
Contents:
import type { IEvent } from '../../event-store/event'
import type { MediaTypeTree } from '../tree'
import { MediaTypeAlreadyExistsError } from '../tree'
import { MediaTypeTreeNode } from '../tree-node'

export class AddMediaTypeToTreeEvent implements IEvent {
  constructor(public readonly id: number) {}

  process(tree: MediaTypeTree): void | MediaTypeAlreadyExistsError {
    const treeNode = MediaTypeTreeNode.create(this.id)
    const result = tree.insert(treeNode)
    if (result instanceof MediaTypeAlreadyExistsError) {
      return result
    }
  }
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/events/add-parent-to-media-type.test.ts
Contents:
import { expect } from 'vitest'

import { test } from '../../../../../../../../vitest-setup'
import { MemoryIdGenerator } from '../../../infrastructure/memory-id-generator'
import { CycleError, MediaTypeNotFoundError, MediaTypeTree } from '../tree'
import { AddMediaTypeToTreeEvent } from './add-media-type-to-tree'
import { AddParentToMediaTypeEvent } from './add-parent-to-media-type'

test('should add a parent to a media type', () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  const id = addMediaType(idGenerator, tree)
  const parentId = addMediaType(idGenerator, tree)

  const addParentResult = new AddParentToMediaTypeEvent(id, parentId).process(tree)
  if (addParentResult instanceof Error) {
    expect.fail(`Failed to add parent to media type: ${addParentResult.message}`)
  }

  const parent = tree.get(parentId)
  expect(parent).toBeDefined()
  expect(parent?.hasChild(id)).toBe(true)
})

test("should error if the media type doesn't exist", () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  const id = idGenerator.generate()
  const parentId = idGenerator.generate()

  const addParentResult = new AddParentToMediaTypeEvent(id, parentId).process(tree)

  expect(addParentResult).toBeInstanceOf(MediaTypeNotFoundError)
  expect((addParentResult as MediaTypeNotFoundError).id).toBe(id)
})

test("should error if parent media type doesn't exist", () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  const id = addMediaType(idGenerator, tree)
  const nonexistentParentId = idGenerator.generate()

  const addParentResult = new AddParentToMediaTypeEvent(id, nonexistentParentId).process(tree)

  expect(addParentResult).toBeInstanceOf(MediaTypeNotFoundError)
  expect((addParentResult as MediaTypeNotFoundError).id).toBe(nonexistentParentId)
})

test('should error when creating a 1-cycle in the tree', () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  const id = addMediaType(idGenerator, tree)

  const addParentResult = new AddParentToMediaTypeEvent(id, id).process(tree)

  expect(addParentResult).toBeInstanceOf(CycleError)
  expect((addParentResult as CycleError).cycle).toEqual([id, id])
})

test('should error when creating a 2-cycle in the tree', () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  // Create structure: A → B → A
  const a = addMediaType(idGenerator, tree)
  const b = addMediaType(idGenerator, tree)

  const aParentResult = new AddParentToMediaTypeEvent(b, a).process(tree)
  if (aParentResult instanceof Error) {
    expect.fail(`Failed to add parent to media type: ${aParentResult.message}`)
  }

  const addCycleResult = new AddParentToMediaTypeEvent(a, b).process(tree)
  expect(addCycleResult).toBeInstanceOf(CycleError)
  expect((addCycleResult as unknown as CycleError).cycle).toEqual([a, b, a])
})

test('should error when creating a 3-cycle in the tree', () => {
  const tree = new MediaTypeTree()
  const idGenerator = new MemoryIdGenerator()

  // Create structure: A → B → C → A
  const a = addMediaType(idGenerator, tree)
  const b = addMediaType(idGenerator, tree)
  const c = addMediaType(idGenerator, tree)

  const aParentResult = new AddParentToMediaTypeEvent(b, a).process(tree)
  if (aParentResult instanceof Error) {
    expect.fail(`Failed to add parent to media type: ${aParentResult.message}`)
  }

  const bParentResult = new AddParentToMediaTypeEvent(c, b).process(tree)
  if (bParentResult instanceof Error) {
    expect.fail(`Failed to add parent to media type: ${bParentResult.message}`)
  }

  const addCycleResult = new AddParentToMediaTypeEvent(a, c).process(tree)
  expect(addCycleResult).toBeInstanceOf(CycleError)
  expect((addCycleResult as unknown as CycleError).cycle).toEqual([a, b, c, a])
})

function addMediaType(idGenerator: MemoryIdGenerator, tree: MediaTypeTree) {
  const id = idGenerator.generate()
  const addMediaTypeEvent = new AddMediaTypeToTreeEvent(id)
  const addMediaTypeResult = addMediaTypeEvent.process(tree)
  if (addMediaTypeResult instanceof Error) {
    expect.fail(`Failed to add media type to tree: ${addMediaTypeResult.message}`)
  }
  return id
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/events/add-parent-to-media-type.ts
Contents:
import type { IEvent } from '../../event-store/event'
import type { CycleError, MediaTypeNotFoundError } from '../tree'
import { type MediaTypeTree } from '../tree'

export class AddParentToMediaTypeEvent implements IEvent {
  constructor(
    public readonly id: number,
    public readonly parentId: number,
  ) {}

  process(tree: MediaTypeTree): void | MediaTypeNotFoundError | CycleError {
    const result = tree.addParent(this.id, this.parentId)
    if (result instanceof Error) {
      return result
    }
  }
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/repository.ts
Contents:
import type { MediaTypeTree } from './tree'

export type IMediaTypeTreeRepository = {
  get(): MediaTypeTree | Promise<MediaTypeTree>
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/tree-node.ts
Contents:
export class MediaTypeTreeNode {
  private constructor(
    public readonly id: number,
    private children: Set<number>,
  ) {}

  static create(id: number): MediaTypeTreeNode {
    return new MediaTypeTreeNode(id, new Set())
  }

  addChild(id: number): void {
    this.children.add(id)
  }

  getChildren(): Set<number> {
    return this.children
  }

  hasChild(id: number): boolean {
    return this.children.has(id)
  }
}

---

File: src/lib/server/features/media/commands/domain/media-type-tree/tree.ts
Contents:
import { CustomError } from '$lib/utils/error'

import { type MediaTypeTreeNode } from './tree-node'

export class MediaTypeTree {
  private nodes: Map<number, MediaTypeTreeNode>

  constructor() {
    this.nodes = new Map()
  }

  insert(node: MediaTypeTreeNode): void | MediaTypeAlreadyExistsError {
    if (this.nodes.has(node.id)) {
      return new MediaTypeAlreadyExistsError(node.id)
    }

    this.nodes.set(node.id, node)
  }

  addParent(id: number, parentId: number): void | MediaTypeNotFoundError | CycleError {
    const node = this.nodes.get(id)
    if (node === undefined) {
      return new MediaTypeNotFoundError(id)
    }

    const parentNode = this.nodes.get(parentId)
    if (parentNode === undefined) {
      return new MediaTypeNotFoundError(parentId)
    }

    parentNode.addChild(id)

    const cycle = this.findCycle()
    if (cycle) {
      return new CycleError(cycle)
    }
  }

  get(id: number): MediaTypeTreeNode | undefined {
    return this.nodes.get(id)
  }

  getAll(): MediaTypeTreeNode[] {
    return [...this.nodes.values()]
  }

  private findCycle(): number[] | undefined {
    const finished = new Set<number>()

    const dfs = (v: number, stack: number[]): number[] | undefined => {
      if (finished.has(v)) {
        return undefined
      }

      if (stack.includes(v)) {
        const cycleStart = stack.lastIndexOf(v)
        return [...stack.slice(cycleStart), v]
      }

      for (const child of this.nodes.get(v)?.getChildren() ?? new Set()) {
        const cycle = dfs(child, [...stack, v])
        if (cycle) {
          return cycle
        }
      }

      finished.add(v)
      return undefined
    }

    for (const node of this.nodes.values()) {
      const cycle = dfs(node.id, [])
      if (cycle) return cycle
    }

    return undefined
  }
}

export class MediaTypeAlreadyExistsError extends CustomError {
  constructor(public readonly id: number) {
    super('MediaTypeAlreadyExistsError', `A media type already exists with id: ${id}`)
  }
}

export class MediaTypeNotFoundError extends CustomError {
  constructor(public readonly id: number) {
    super('MediaTypeNotFoundError', `A media type was not found for id: ${id}`)
  }
}

export class CycleError extends CustomError {
  constructor(public readonly cycle: number[]) {
    super('CycleError', `A cycle was detected: ${cycle.join(' -> ')}`)
  }
}

---

File: src/lib/server/features/media/commands/infrastructure/memory-event-store.ts
Contents:
import type { IEvent } from '../domain/event-store/event'
import type { IEventStore } from '../domain/event-store/event-store'

export class MemoryEventStore implements IEventStore {
  private events: IEvent[]

  constructor() {
    this.events = []
  }

  get() {
    return this.events
  }

  save(event: IEvent) {
    this.events.push(event)
  }
}

---

File: src/lib/server/features/media/commands/infrastructure/memory-id-generator.ts
Contents:
import type { IIdGenerator } from '../domain/ids/id-generator'

export class MemoryIdGenerator implements IIdGenerator {
  private id: number

  constructor() {
    this.id = 0
  }

  generate() {
    const currentId = this.id
    const nextId = currentId + 1
    this.id = nextId
    return nextId
  }
}

---

File: src/lib/server/features/media/commands/infrastructure/memory-media-type-tree-repository.ts
Contents:
import type { IEventStore } from '../domain/event-store/event-store'
import type { IMediaTypeTreeRepository } from '../domain/media-type-tree/repository'
import { MediaTypeTree } from '../domain/media-type-tree/tree'

export class MemoryMediaTypeTreeRepository implements IMediaTypeTreeRepository {
  constructor(private eventStore: IEventStore) {}

  async get() {
    const tree = new MediaTypeTree()

    const events = await this.eventStore.get()
    for (const event of events) {
      const result = event.process(tree)
      if (result instanceof Error) {
        // We should never have error sneaking in here since we protect against them
        // before inserting the event.
        throw result
      }
    }

    return tree
  }
}

---

